# 🚀 ONE-CLICK FASTAPI DEPLOYMENT
# Copy this entire cell to Google Colab and run it!

import os
import subprocess
import sys
import time
import threading
import requests
from datetime import datetime

print("🎯 ONE-CLICK FASTAPI DEPLOYMENT STARTING...")
print("=" * 60)

# Step 1: Install packages
print("\n📦 Installing required packages...")
packages_to_install = ["pyngrok" "fastapi" "uvicorn[standard]" "python-dotenv" "requests" "aiofiles" "fastapi==0.104.1" "uvicorn==0.24.0"]

for package in packages_to_install:
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-q", package])
        print(f"✅ Installed: {package}")
    except:
        print(f"⚠️ Failed to install: {package}")

print("✅ Package installation completed!")

# Step 2: Clone repository
print("\n📥 Cloning repository...")
github_url = "https://github.com/sonagara-vashram/test.git"

if os.path.exists('/content/app'):
    subprocess.run(['rm', '-rf', '/content/app'], check=False)

try:
    subprocess.run(['git', 'clone', github_url, '/content/app'], check=True)
    os.chdir('/content/app')
    print("✅ Repository cloned successfully!")
    
    # Show repository contents
    print("\n📂 Repository contents:")
    subprocess.run(['ls', '-la'])
    
    # Install project requirements if exists
    if os.path.exists('requirements.txt'):
        print("\n📋 Installing project requirements...")
        subprocess.run([sys.executable, "-m", "pip", "install", "-q", "-r", "requirements.txt"])
        print("✅ Project requirements installed!")
        
except Exception as e:
    print(f"❌ Error cloning repository: {e}")
    raise

# Step 3: Set environment variables
print("\n🔐 Setting up environment variables...")
# 🔐 Setting up environment variables\nimport os\n\nos.environ["SECRET_KEY"] = "your_secret_key"\n\nprint('✅ Set 1 environment variables')\nprint('🔐 Environment variables configured:')\nenv_vars_list = ['SECRET_KEY']\nfor key in env_vars_list:\n    print(f'  ✓ {key}')

print("✅ Environment variables setup completed!")

# Step 4: Import and start FastAPI app
print("\n🔍 Loading FastAPI application...")
app_file = "main.py"
app_variable = "app"

try:
    import importlib.util
    
    spec = importlib.util.spec_from_file_location('main_app', app_file)
    app_module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(app_module)
    
    if hasattr(app_module, app_variable):
        fastapi_app = getattr(app_module, app_variable)
        print(f"✅ Found FastAPI app: {app_variable}")
        print(f"📊 App type: {type(fastapi_app)}")
    else:
        print(f"❌ App variable '{app_variable}' not found in {app_file}")
        print("Available variables:")
        for attr in dir(app_module):
            if not attr.startswith('_'):
                print(f"  - {attr}: {type(getattr(app_module, attr))}")
        raise Exception("App variable not found")
        
except Exception as e:
    print(f"❌ Error loading FastAPI app: {e}")
    raise

# Step 5: Start FastAPI server
print("\n🚀 Starting FastAPI server...")

import uvicorn

def start_server():
    uvicorn.run(fastapi_app, host='0.0.0.0', port=8000, log_level='warning')

server_thread = threading.Thread(target=start_server, daemon=True)
server_thread.start()

# Wait for server to start
print("⏳ Waiting for server to start...")
time.sleep(8)
print("✅ FastAPI server started on port 8000!")

# Step 6: Create ngrok tunnel
print("\n🌐 Creating public URL with ngrok...")

try:
    from pyngrok import ngrok
    from google.colab import userdata
    
    # Try to get auth token from Colab secrets
    try:
        ngrok_auth_token = userdata.get('NGROK_AUTH_TOKEN')
        ngrok.set_auth_token(ngrok_auth_token)
        print("✅ Using ngrok auth token from Colab secrets!")
    except:
        # Use default auth token if no secret found
        default_token = "30oMBfbIEdvTYekQdAcxmWkzsUr_6ufCyH4WdqtHty73j44y4"
        try:
            ngrok.set_auth_token(default_token)
            print("✅ Using default ngrok auth token!")
        except:
            print("⚠️ No NGROK_AUTH_TOKEN in Colab secrets - using free tier")
            print("💡 For unlimited sessions: Add NGROK_AUTH_TOKEN to Colab secrets")
    
    # Create tunnel
    public_tunnel = ngrok.connect(8000)
    public_url = public_tunnel.public_url
    
    print("\n🎉 DEPLOYMENT SUCCESSFUL! 🎉")
    print("=" * 60)
    print(f"🔗 PUBLIC API URL: {public_url}")
    print(f"📚 Swagger UI: {public_url}/docs")
    print(f"📋 ReDoc: {public_url}/redoc")
    print("=" * 60)
    
    # Test the API
    print("\n🧪 Testing API...")
    try:
        response = requests.get(f"{public_url}/", timeout=10)
        if response.status_code == 200:
            print("✅ API is responding correctly!")
            print(f"📊 Response preview: {response.text[:100]}...")
        else:
            print(f"⚠️ API returned status: {response.status_code}")
    except Exception as test_error:
        print(f"⚠️ API test failed: {test_error}")
    
    print("\n🎯 YOUR FASTAPI BACKEND IS NOW LIVE!")
    print("💡 Copy the PUBLIC API URL above for your frontend")
    print("⚠️ Keep this notebook running to maintain the API")
    
    # Store URL globally
    globals()['PUBLIC_API_URL'] = public_url
    
    print("\n📱 QUICK LINKS:")
    print(f"🏠 Homepage: {public_url}/")
    print(f"📚 API Docs: {public_url}/docs")
    print(f"📋 ReDoc: {public_url}/redoc")
    
    print("\n✨ DEPLOYMENT COMPLETED SUCCESSFULLY! ✨")
    
except Exception as e:
    print(f"❌ Failed to create ngrok tunnel: {e}")
    print("\n🔧 Troubleshooting:")
    print("1. Ensure FastAPI server is running")
    print("2. Check if port 8000 is accessible")
    print("3. Try running this cell again")
    print("4. For unlimited ngrok: Add NGROK_AUTH_TOKEN to Colab secrets")
    raise

# Optional: Simple monitoring function
def monitor_api():
    """Simple API monitoring function"""
    if 'PUBLIC_API_URL' in globals():
        api_url = globals()['PUBLIC_API_URL']
        print(f"\n🔄 Monitoring API: {api_url}")
        print("Run this function to check API health:")
        print("monitor_api()")
        
        try:
            response = requests.get(f"{api_url}/", timeout=5)
            timestamp = datetime.now().strftime('%H:%M:%S')
            if response.status_code == 200:
                print(f"✅ {timestamp} - API healthy ({response.status_code})")
            else:
                print(f"⚠️ {timestamp} - API status: {response.status_code}")
        except Exception as e:
            print(f"❌ {timestamp} - API check failed: {e}")
    else:
        print("❌ No API URL found")

print("\n🎯 To monitor your API, run: monitor_api()")
